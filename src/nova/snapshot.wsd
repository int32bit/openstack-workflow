title create an image(snapshot)
participant client
participant nova_api


# nova/api/compute/servers.py _action_create_image()
client->nova_api: createImage
activate client
activate nova_api

# nova/api/openstack/compute/servers.py _action_create_image()
note over nova_api: validation create image schema
note over nova_api: get context
note over nova_api: authorize action 'create_image' policy
note over nova_api: check image metadata properties
nova_api->nova_api: get server by uuid
note over nova_api: cache db instance

alt if is volume backend instance
    note over nova_api: authorize action 'create_image:allow_volume_backed' policy
    note over nova_api: ensure instance state is ACTIVE or STOPPED
    note over nova_api: initialize new metadata \nfor a snapshot of the given \ninstance
    alt if vm.state is active
        nova_api->+nova_compute: quiesce instance
        note over nova_compute: get image meta
        nova_compute->+libvirt: quiesce
        note over libvirt: get instance guest
        note over libvirt: get domain
        note over libvirt: freeze the domain
        libvirt->nova_compute: done
        deactivate libvirt
        deactivate nova_compute
        note over nova_api: quiesced = True
    end
    nova_api->+database: get block device mapping list
    database->nova_api: done
    deactivate database
    alt if bdm is volume:
        nova_api->+cinder_api: get volume by id
        cinder_api->nova_api: volume object
        deactivate cinder_api
        nova_api->+cinder_api: force create volume snapshot
        cinder_api->nova_api: snapshot object
        deactivate cinder_api
        note over nova_api: get image mapping
    else if bdm is not volume
        note over nova_api: get image mapping
    end
    alt if quiesced == True
        nova_api->+nova_compute: unquiesce instance
        note over nova_compute: wait for snapshot completion
        note over nova_compute: get image meta
        nova_compute->+libvirt: unquiesce
        note over libvirt: get instance guest
        note over libvirt: get domain
        note over libvirt: thaw(unfreeze) the domain
        libvirt->nova_compute: done
        deactivate libvirt
        deactivate nova_compute
    end
    nova_api->+glance_api: create image with image meta
    note over glance_api: create image
    glance_api->nova_api: image meta
    deactivate glance_api
else if not volume backend instance
    note over nova_api: check policy
    note over nova_api: check instance cell
    note over nova_api: check instance state in [ACTIVE,\nSTOPPED,PAUSED,SUSPENDED]
    note over nova_api: initialize new metadata \nfor a snapshot of the given \ninstance
    nova_api->+glance_api: create image with image meta
    note over glance_api: create image
    glance_api->nova_api: image meta
    deactivate glance_api
    nova_api->+database: task_states=IMAGE_SNAPSHOT_PENDING
    database->nova_api: done
    deactivate database
    nova_api->nova_compute: snapshot_instance
    deactivate nova_api
    deactivate client
    nova_compute->+libvirt: get instance power state
    libvirt->nova_compute: done
    deactivate libvirt
    note over nova_compute: log a warning if power state is not RUNNING
    nova_compute->+database: update instance power state
    database->nova_compute: done
    deactivate database
    note over nova_compute: notify: snapshot.start
    nova_compute->+libvirt: snapshot
    note over libvirt: get instance guest
    note over libvirt: get domain
    libvirt->+glance_api: get snapshot by id
    glance_api->libvirt: snapshot object
    deactivate glance_api
    note over libvirt: get source type and source format
    note over libvirt: get image metadata
    note over libvirt: check if we can perform live snapshot
    note over libvirt: get image snapshot backend according to image type
    note over libvirt: perform image snapshot operation
    libvirt->+database: task_states=IMAGE_PENDING_UPLOAD
    database->libvirt: done
    deactivate database
    libvirt->+database: task_states=IMAGE_UPLOAD
    database->libvirt: done
    deactivate database
    alt not live snapshot
        note over libvirt: create snapshot domain
        note over libvirt: attach pci devices
        note over libvirt: attach sriov ports
    end
    libvirt->+glance_api: update image
    note over glance_api: update image metadata
    note over glance_api: upload image
    glance_api->libvirt: done
    deactivate glance_api
    
    note over libvirt: log snapshot image upload complete
    libvirt->nova_compute: done
    deactivate libvirt
    nova_api->+database: task_states=None
    database->nova_api: done
    deactivate database
    note over nova_compute: notify: snapshot.end
end
nova_api->client: response
